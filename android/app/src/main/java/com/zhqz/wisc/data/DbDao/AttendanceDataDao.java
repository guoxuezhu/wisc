package com.zhqz.wisc.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhqz.wisc.data.model.AttendanceData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ATTENDANCE_DATA".
*/
public class AttendanceDataDao extends AbstractDao<AttendanceData, Long> {

    public static final String TABLENAME = "ATTENDANCE_DATA";

    /**
     * Properties of entity AttendanceData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AttendanceId = new Property(0, long.class, "attendanceId", true, "_id");
        public final static Property ActivityCourseId = new Property(1, int.class, "activityCourseId", false, "ACTIVITY_COURSE_ID");
        public final static Property PeriodId = new Property(2, int.class, "periodId", false, "PERIOD_ID");
        public final static Property Attendancedate = new Property(3, String.class, "attendancedate", false, "ATTENDANCEDATE");
        public final static Property Status = new Property(4, int.class, "status", false, "STATUS");
        public final static Property CardNumber = new Property(5, String.class, "cardNumber", false, "CARD_NUMBER");
    }


    public AttendanceDataDao(DaoConfig config) {
        super(config);
    }
    
    public AttendanceDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ATTENDANCE_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: attendanceId
                "\"ACTIVITY_COURSE_ID\" INTEGER NOT NULL ," + // 1: activityCourseId
                "\"PERIOD_ID\" INTEGER NOT NULL ," + // 2: periodId
                "\"ATTENDANCEDATE\" TEXT," + // 3: attendancedate
                "\"STATUS\" INTEGER NOT NULL ," + // 4: status
                "\"CARD_NUMBER\" TEXT);"); // 5: cardNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ATTENDANCE_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AttendanceData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getAttendanceId());
        stmt.bindLong(2, entity.getActivityCourseId());
        stmt.bindLong(3, entity.getPeriodId());
 
        String attendancedate = entity.getAttendancedate();
        if (attendancedate != null) {
            stmt.bindString(4, attendancedate);
        }
        stmt.bindLong(5, entity.getStatus());
 
        String cardNumber = entity.getCardNumber();
        if (cardNumber != null) {
            stmt.bindString(6, cardNumber);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AttendanceData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getAttendanceId());
        stmt.bindLong(2, entity.getActivityCourseId());
        stmt.bindLong(3, entity.getPeriodId());
 
        String attendancedate = entity.getAttendancedate();
        if (attendancedate != null) {
            stmt.bindString(4, attendancedate);
        }
        stmt.bindLong(5, entity.getStatus());
 
        String cardNumber = entity.getCardNumber();
        if (cardNumber != null) {
            stmt.bindString(6, cardNumber);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public AttendanceData readEntity(Cursor cursor, int offset) {
        AttendanceData entity = new AttendanceData( //
            cursor.getLong(offset + 0), // attendanceId
            cursor.getInt(offset + 1), // activityCourseId
            cursor.getInt(offset + 2), // periodId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // attendancedate
            cursor.getInt(offset + 4), // status
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // cardNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AttendanceData entity, int offset) {
        entity.setAttendanceId(cursor.getLong(offset + 0));
        entity.setActivityCourseId(cursor.getInt(offset + 1));
        entity.setPeriodId(cursor.getInt(offset + 2));
        entity.setAttendancedate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatus(cursor.getInt(offset + 4));
        entity.setCardNumber(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AttendanceData entity, long rowId) {
        entity.setAttendanceId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AttendanceData entity) {
        if(entity != null) {
            return entity.getAttendanceId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AttendanceData entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
