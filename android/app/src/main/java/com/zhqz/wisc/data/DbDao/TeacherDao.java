package com.zhqz.wisc.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhqz.wisc.data.model.Teacher;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEACHER".
*/
public class TeacherDao extends AbstractDao<Teacher, Long> {

    public static final String TABLENAME = "TEACHER";

    /**
     * Properties of entity Teacher.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TeacherId = new Property(0, int.class, "teacherId", false, "TEACHER_ID");
        public final static Property TeacherName = new Property(1, String.class, "teacherName", false, "TEACHER_NAME");
        public final static Property CardNumber = new Property(2, String.class, "cardNumber", false, "CARD_NUMBER");
        public final static Property StaffNumber = new Property(3, String.class, "staffNumber", false, "STAFF_NUMBER");
        public final static Property Attendancedate = new Property(4, String.class, "attendancedate", false, "ATTENDANCEDATE");
        public final static Property AttendanceId = new Property(5, long.class, "attendanceId", true, "_id");
        public final static Property Status = new Property(6, int.class, "status", false, "STATUS");
        public final static Property Picture = new Property(7, String.class, "picture", false, "PICTURE");
    }


    public TeacherDao(DaoConfig config) {
        super(config);
    }
    
    public TeacherDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEACHER\" (" + //
                "\"TEACHER_ID\" INTEGER NOT NULL ," + // 0: teacherId
                "\"TEACHER_NAME\" TEXT," + // 1: teacherName
                "\"CARD_NUMBER\" TEXT," + // 2: cardNumber
                "\"STAFF_NUMBER\" TEXT," + // 3: staffNumber
                "\"ATTENDANCEDATE\" TEXT," + // 4: attendancedate
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 5: attendanceId
                "\"STATUS\" INTEGER NOT NULL ," + // 6: status
                "\"PICTURE\" TEXT);"); // 7: picture
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEACHER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Teacher entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTeacherId());
 
        String teacherName = entity.getTeacherName();
        if (teacherName != null) {
            stmt.bindString(2, teacherName);
        }
 
        String cardNumber = entity.getCardNumber();
        if (cardNumber != null) {
            stmt.bindString(3, cardNumber);
        }
 
        String staffNumber = entity.getStaffNumber();
        if (staffNumber != null) {
            stmt.bindString(4, staffNumber);
        }
 
        String attendancedate = entity.getAttendancedate();
        if (attendancedate != null) {
            stmt.bindString(5, attendancedate);
        }
        stmt.bindLong(6, entity.getAttendanceId());
        stmt.bindLong(7, entity.getStatus());
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(8, picture);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Teacher entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTeacherId());
 
        String teacherName = entity.getTeacherName();
        if (teacherName != null) {
            stmt.bindString(2, teacherName);
        }
 
        String cardNumber = entity.getCardNumber();
        if (cardNumber != null) {
            stmt.bindString(3, cardNumber);
        }
 
        String staffNumber = entity.getStaffNumber();
        if (staffNumber != null) {
            stmt.bindString(4, staffNumber);
        }
 
        String attendancedate = entity.getAttendancedate();
        if (attendancedate != null) {
            stmt.bindString(5, attendancedate);
        }
        stmt.bindLong(6, entity.getAttendanceId());
        stmt.bindLong(7, entity.getStatus());
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(8, picture);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 5);
    }    

    @Override
    public Teacher readEntity(Cursor cursor, int offset) {
        Teacher entity = new Teacher( //
            cursor.getInt(offset + 0), // teacherId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // teacherName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cardNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // staffNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // attendancedate
            cursor.getLong(offset + 5), // attendanceId
            cursor.getInt(offset + 6), // status
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // picture
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Teacher entity, int offset) {
        entity.setTeacherId(cursor.getInt(offset + 0));
        entity.setTeacherName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCardNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStaffNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAttendancedate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAttendanceId(cursor.getLong(offset + 5));
        entity.setStatus(cursor.getInt(offset + 6));
        entity.setPicture(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Teacher entity, long rowId) {
        entity.setAttendanceId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Teacher entity) {
        if(entity != null) {
            return entity.getAttendanceId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Teacher entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
