package com.zhqz.wisc.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhqz.wisc.data.model.Course;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COURSE".
*/
public class CourseDao extends AbstractDao<Course, Void> {

    public static final String TABLENAME = "COURSE";

    /**
     * Properties of entity Course.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CourseId = new Property(0, int.class, "courseId", false, "COURSE_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ActivityCourseId = new Property(2, int.class, "activityCourseId", false, "ACTIVITY_COURSE_ID");
        public final static Property PeriodId = new Property(3, int.class, "periodId", false, "PERIOD_ID");
        public final static Property TeacherName = new Property(4, String.class, "teacherName", false, "TEACHER_NAME");
        public final static Property TeacherId = new Property(5, int.class, "teacherId", false, "TEACHER_ID");
        public final static Property StartTime = new Property(6, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(7, String.class, "endTime", false, "END_TIME");
        public final static Property Courseforshort = new Property(8, String.class, "courseforshort", false, "COURSEFORSHORT");
        public final static Property LessonNum = new Property(9, String.class, "lessonNum", false, "LESSON_NUM");
        public final static Property IfSignIn = new Property(10, int.class, "ifSignIn", false, "IF_SIGN_IN");
    }


    public CourseDao(DaoConfig config) {
        super(config);
    }
    
    public CourseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COURSE\" (" + //
                "\"COURSE_ID\" INTEGER NOT NULL ," + // 0: courseId
                "\"NAME\" TEXT," + // 1: name
                "\"ACTIVITY_COURSE_ID\" INTEGER NOT NULL ," + // 2: activityCourseId
                "\"PERIOD_ID\" INTEGER NOT NULL ," + // 3: periodId
                "\"TEACHER_NAME\" TEXT," + // 4: teacherName
                "\"TEACHER_ID\" INTEGER NOT NULL ," + // 5: teacherId
                "\"START_TIME\" TEXT," + // 6: startTime
                "\"END_TIME\" TEXT," + // 7: endTime
                "\"COURSEFORSHORT\" TEXT," + // 8: courseforshort
                "\"LESSON_NUM\" TEXT," + // 9: lessonNum
                "\"IF_SIGN_IN\" INTEGER NOT NULL );"); // 10: ifSignIn
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COURSE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Course entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCourseId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getActivityCourseId());
        stmt.bindLong(4, entity.getPeriodId());
 
        String teacherName = entity.getTeacherName();
        if (teacherName != null) {
            stmt.bindString(5, teacherName);
        }
        stmt.bindLong(6, entity.getTeacherId());
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(7, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(8, endTime);
        }
 
        String courseforshort = entity.getCourseforshort();
        if (courseforshort != null) {
            stmt.bindString(9, courseforshort);
        }
 
        String lessonNum = entity.getLessonNum();
        if (lessonNum != null) {
            stmt.bindString(10, lessonNum);
        }
        stmt.bindLong(11, entity.getIfSignIn());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Course entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCourseId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getActivityCourseId());
        stmt.bindLong(4, entity.getPeriodId());
 
        String teacherName = entity.getTeacherName();
        if (teacherName != null) {
            stmt.bindString(5, teacherName);
        }
        stmt.bindLong(6, entity.getTeacherId());
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(7, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(8, endTime);
        }
 
        String courseforshort = entity.getCourseforshort();
        if (courseforshort != null) {
            stmt.bindString(9, courseforshort);
        }
 
        String lessonNum = entity.getLessonNum();
        if (lessonNum != null) {
            stmt.bindString(10, lessonNum);
        }
        stmt.bindLong(11, entity.getIfSignIn());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Course readEntity(Cursor cursor, int offset) {
        Course entity = new Course( //
            cursor.getInt(offset + 0), // courseId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // activityCourseId
            cursor.getInt(offset + 3), // periodId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // teacherName
            cursor.getInt(offset + 5), // teacherId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // startTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // endTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // courseforshort
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // lessonNum
            cursor.getInt(offset + 10) // ifSignIn
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Course entity, int offset) {
        entity.setCourseId(cursor.getInt(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setActivityCourseId(cursor.getInt(offset + 2));
        entity.setPeriodId(cursor.getInt(offset + 3));
        entity.setTeacherName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTeacherId(cursor.getInt(offset + 5));
        entity.setStartTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEndTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCourseforshort(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLessonNum(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIfSignIn(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Course entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Course entity) {
        return null;
    }

    @Override
    public boolean hasKey(Course entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
